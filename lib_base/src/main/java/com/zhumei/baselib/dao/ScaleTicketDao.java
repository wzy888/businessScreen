package com.zhumei.baselib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhumei.baselib.bean.scale.ScaleTicket;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCALE_TICKET".
*/
public class ScaleTicketDao extends AbstractDao<ScaleTicket, Void> {

    public static final String TABLENAME = "SCALE_TICKET";

    /**
     * Properties of entity ScaleTicket.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TicFlg = new Property(0, String.class, "ticFlg", false, "TIC_FLG");
        public final static Property AliagnFlg = new Property(1, String.class, "aliagnFlg", false, "ALIAGN_FLG");
        public final static Property PrtFlg = new Property(2, String.class, "prtFlg", false, "PRT_FLG");
        public final static Property PrtData = new Property(3, String.class, "prtData", false, "PRT_DATA");
    }


    public ScaleTicketDao(DaoConfig config) {
        super(config);
    }
    
    public ScaleTicketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCALE_TICKET\" (" + //
                "\"TIC_FLG\" TEXT," + // 0: ticFlg
                "\"ALIAGN_FLG\" TEXT," + // 1: aliagnFlg
                "\"PRT_FLG\" TEXT," + // 2: prtFlg
                "\"PRT_DATA\" TEXT);"); // 3: prtData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCALE_TICKET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScaleTicket entity) {
        stmt.clearBindings();
 
        String ticFlg = entity.getTicFlg();
        if (ticFlg != null) {
            stmt.bindString(1, ticFlg);
        }
 
        String aliagnFlg = entity.getAliagnFlg();
        if (aliagnFlg != null) {
            stmt.bindString(2, aliagnFlg);
        }
 
        String prtFlg = entity.getPrtFlg();
        if (prtFlg != null) {
            stmt.bindString(3, prtFlg);
        }
 
        String prtData = entity.getPrtData();
        if (prtData != null) {
            stmt.bindString(4, prtData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScaleTicket entity) {
        stmt.clearBindings();
 
        String ticFlg = entity.getTicFlg();
        if (ticFlg != null) {
            stmt.bindString(1, ticFlg);
        }
 
        String aliagnFlg = entity.getAliagnFlg();
        if (aliagnFlg != null) {
            stmt.bindString(2, aliagnFlg);
        }
 
        String prtFlg = entity.getPrtFlg();
        if (prtFlg != null) {
            stmt.bindString(3, prtFlg);
        }
 
        String prtData = entity.getPrtData();
        if (prtData != null) {
            stmt.bindString(4, prtData);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ScaleTicket readEntity(Cursor cursor, int offset) {
        ScaleTicket entity = new ScaleTicket( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ticFlg
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // aliagnFlg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // prtFlg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // prtData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScaleTicket entity, int offset) {
        entity.setTicFlg(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAliagnFlg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrtFlg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrtData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ScaleTicket entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ScaleTicket entity) {
        return null;
    }

    @Override
    public boolean hasKey(ScaleTicket entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
