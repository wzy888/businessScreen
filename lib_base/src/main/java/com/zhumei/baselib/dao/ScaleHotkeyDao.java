package com.zhumei.baselib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhumei.baselib.bean.scale.ScaleHotkey;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCALE_HOTKEY".
*/
public class ScaleHotkeyDao extends AbstractDao<ScaleHotkey, Void> {

    public static final String TABLENAME = "SCALE_HOTKEY";

    /**
     * Properties of entity ScaleHotkey.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Index = new Property(0, String.class, "index", false, "INDEX");
        public final static Property PLU1 = new Property(1, String.class, "PLU1", false, "PLU1");
        public final static Property PLU2 = new Property(2, String.class, "PLU2", false, "PLU2");
    }


    public ScaleHotkeyDao(DaoConfig config) {
        super(config);
    }
    
    public ScaleHotkeyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCALE_HOTKEY\" (" + //
                "\"INDEX\" TEXT UNIQUE ," + // 0: index
                "\"PLU1\" TEXT," + // 1: PLU1
                "\"PLU2\" TEXT);"); // 2: PLU2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCALE_HOTKEY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScaleHotkey entity) {
        stmt.clearBindings();
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(1, index);
        }
 
        String PLU1 = entity.getPLU1();
        if (PLU1 != null) {
            stmt.bindString(2, PLU1);
        }
 
        String PLU2 = entity.getPLU2();
        if (PLU2 != null) {
            stmt.bindString(3, PLU2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScaleHotkey entity) {
        stmt.clearBindings();
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(1, index);
        }
 
        String PLU1 = entity.getPLU1();
        if (PLU1 != null) {
            stmt.bindString(2, PLU1);
        }
 
        String PLU2 = entity.getPLU2();
        if (PLU2 != null) {
            stmt.bindString(3, PLU2);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ScaleHotkey readEntity(Cursor cursor, int offset) {
        ScaleHotkey entity = new ScaleHotkey( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // index
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PLU1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // PLU2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScaleHotkey entity, int offset) {
        entity.setIndex(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPLU1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPLU2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ScaleHotkey entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ScaleHotkey entity) {
        return null;
    }

    @Override
    public boolean hasKey(ScaleHotkey entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
