package com.zhumei.baselib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhumei.baselib.bean.scale.ScaleGoods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCALE_GOODS".
*/
public class ScaleGoodsDao extends AbstractDao<ScaleGoods, Void> {

    public static final String TABLENAME = "SCALE_GOODS";

    /**
     * Properties of entity ScaleGoods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Unit = new Property(1, String.class, "unit", false, "UNIT");
        public final static Property Price = new Property(2, double.class, "price", false, "PRICE");
        public final static Property MemPrice = new Property(3, double.class, "memPrice", false, "MEM_PRICE");
        public final static Property MinPrice = new Property(4, double.class, "minPrice", false, "MIN_PRICE");
        public final static Property PluType = new Property(5, String.class, "pluType", false, "PLU_TYPE");
        public final static Property Discount = new Property(6, String.class, "discount", false, "DISCOUNT");
        public final static Property ChangePrice = new Property(7, String.class, "changePrice", false, "CHANGE_PRICE");
        public final static Property PLU = new Property(8, String.class, "PLU", false, "PLU");
        public final static Property SelfCode = new Property(9, String.class, "selfCode", false, "SELF_CODE");
    }


    public ScaleGoodsDao(DaoConfig config) {
        super(config);
    }
    
    public ScaleGoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCALE_GOODS\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"UNIT\" TEXT," + // 1: unit
                "\"PRICE\" REAL NOT NULL ," + // 2: price
                "\"MEM_PRICE\" REAL NOT NULL ," + // 3: memPrice
                "\"MIN_PRICE\" REAL NOT NULL ," + // 4: minPrice
                "\"PLU_TYPE\" TEXT," + // 5: pluType
                "\"DISCOUNT\" TEXT," + // 6: discount
                "\"CHANGE_PRICE\" TEXT," + // 7: changePrice
                "\"PLU\" TEXT UNIQUE ," + // 8: PLU
                "\"SELF_CODE\" TEXT);"); // 9: selfCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCALE_GOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScaleGoods entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(2, unit);
        }
        stmt.bindDouble(3, entity.getPrice());
        stmt.bindDouble(4, entity.getMemPrice());
        stmt.bindDouble(5, entity.getMinPrice());
 
        String pluType = entity.getPluType();
        if (pluType != null) {
            stmt.bindString(6, pluType);
        }
 
        String discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindString(7, discount);
        }
 
        String changePrice = entity.getChangePrice();
        if (changePrice != null) {
            stmt.bindString(8, changePrice);
        }
 
        String PLU = entity.getPLU();
        if (PLU != null) {
            stmt.bindString(9, PLU);
        }
 
        String selfCode = entity.getSelfCode();
        if (selfCode != null) {
            stmt.bindString(10, selfCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScaleGoods entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(2, unit);
        }
        stmt.bindDouble(3, entity.getPrice());
        stmt.bindDouble(4, entity.getMemPrice());
        stmt.bindDouble(5, entity.getMinPrice());
 
        String pluType = entity.getPluType();
        if (pluType != null) {
            stmt.bindString(6, pluType);
        }
 
        String discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindString(7, discount);
        }
 
        String changePrice = entity.getChangePrice();
        if (changePrice != null) {
            stmt.bindString(8, changePrice);
        }
 
        String PLU = entity.getPLU();
        if (PLU != null) {
            stmt.bindString(9, PLU);
        }
 
        String selfCode = entity.getSelfCode();
        if (selfCode != null) {
            stmt.bindString(10, selfCode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ScaleGoods readEntity(Cursor cursor, int offset) {
        ScaleGoods entity = new ScaleGoods( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // unit
            cursor.getDouble(offset + 2), // price
            cursor.getDouble(offset + 3), // memPrice
            cursor.getDouble(offset + 4), // minPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pluType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // discount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // changePrice
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // PLU
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // selfCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScaleGoods entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUnit(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice(cursor.getDouble(offset + 2));
        entity.setMemPrice(cursor.getDouble(offset + 3));
        entity.setMinPrice(cursor.getDouble(offset + 4));
        entity.setPluType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDiscount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChangePrice(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPLU(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSelfCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ScaleGoods entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ScaleGoods entity) {
        return null;
    }

    @Override
    public boolean hasKey(ScaleGoods entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
