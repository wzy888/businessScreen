package com.zhumei.baselib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhumei.baselib.bean.scale.ScaleTrade;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCALE_TRADE".
*/
public class ScaleTradeDao extends AbstractDao<ScaleTrade, Long> {

    public static final String TABLENAME = "SCALE_TRADE";

    /**
     * Properties of entity ScaleTrade.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MarketId = new Property(1, String.class, "marketId", false, "MARKET_ID");
        public final static Property GoodsName = new Property(2, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property User = new Property(3, String.class, "user", false, "USER");
        public final static Property UnitPrice = new Property(4, double.class, "unitPrice", false, "UNIT_PRICE");
        public final static Property WeightPcs = new Property(5, double.class, "weightPcs", false, "WEIGHT_PCS");
        public final static Property TotPrice = new Property(6, double.class, "totPrice", false, "TOT_PRICE");
        public final static Property Plu = new Property(7, int.class, "plu", false, "PLU");
        public final static Property TradeNo = new Property(8, String.class, "tradeNo", false, "TRADE_NO");
        public final static Property ScaleStallNum = new Property(9, String.class, "scaleStallNum", false, "SCALE_STALL_NUM");
        public final static Property StallNum = new Property(10, String.class, "stallNum", false, "STALL_NUM");
        public final static Property ScaleNum = new Property(11, String.class, "scaleNum", false, "SCALE_NUM");
        public final static Property MerchantName = new Property(12, String.class, "merchantName", false, "MERCHANT_NAME");
        public final static Property TradeTime = new Property(13, String.class, "tradeTime", false, "TRADE_TIME");
        public final static Property TradeUnit = new Property(14, String.class, "tradeUnit", false, "TRADE_UNIT");
        public final static Property PayType = new Property(15, String.class, "payType", false, "PAY_TYPE");
        public final static Property IDataType = new Property(16, int.class, "iDataType", false, "I_DATA_TYPE");
        public final static Property IsUpdate = new Property(17, int.class, "isUpdate", false, "IS_UPDATE");
        public final static Property TradeDataSources = new Property(18, int.class, "tradeDataSources", false, "TRADE_DATA_SOURCES");
        public final static Property MerchantId = new Property(19, String.class, "merchantId", false, "MERCHANT_ID");
    }


    public ScaleTradeDao(DaoConfig config) {
        super(config);
    }
    
    public ScaleTradeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCALE_TRADE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MARKET_ID\" TEXT," + // 1: marketId
                "\"GOODS_NAME\" TEXT," + // 2: goodsName
                "\"USER\" TEXT," + // 3: user
                "\"UNIT_PRICE\" REAL NOT NULL ," + // 4: unitPrice
                "\"WEIGHT_PCS\" REAL NOT NULL ," + // 5: weightPcs
                "\"TOT_PRICE\" REAL NOT NULL ," + // 6: totPrice
                "\"PLU\" INTEGER NOT NULL ," + // 7: plu
                "\"TRADE_NO\" TEXT," + // 8: tradeNo
                "\"SCALE_STALL_NUM\" TEXT," + // 9: scaleStallNum
                "\"STALL_NUM\" TEXT," + // 10: stallNum
                "\"SCALE_NUM\" TEXT," + // 11: scaleNum
                "\"MERCHANT_NAME\" TEXT," + // 12: merchantName
                "\"TRADE_TIME\" TEXT," + // 13: tradeTime
                "\"TRADE_UNIT\" TEXT," + // 14: tradeUnit
                "\"PAY_TYPE\" TEXT," + // 15: payType
                "\"I_DATA_TYPE\" INTEGER NOT NULL ," + // 16: iDataType
                "\"IS_UPDATE\" INTEGER NOT NULL ," + // 17: isUpdate
                "\"TRADE_DATA_SOURCES\" INTEGER NOT NULL ," + // 18: tradeDataSources
                "\"MERCHANT_ID\" TEXT);"); // 19: merchantId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCALE_TRADE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScaleTrade entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String marketId = entity.getMarketId();
        if (marketId != null) {
            stmt.bindString(2, marketId);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(3, goodsName);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, user);
        }
        stmt.bindDouble(5, entity.getUnitPrice());
        stmt.bindDouble(6, entity.getWeightPcs());
        stmt.bindDouble(7, entity.getTotPrice());
        stmt.bindLong(8, entity.getPlu());
 
        String tradeNo = entity.getTradeNo();
        if (tradeNo != null) {
            stmt.bindString(9, tradeNo);
        }
 
        String scaleStallNum = entity.getScaleStallNum();
        if (scaleStallNum != null) {
            stmt.bindString(10, scaleStallNum);
        }
 
        String stallNum = entity.getStallNum();
        if (stallNum != null) {
            stmt.bindString(11, stallNum);
        }
 
        String scaleNum = entity.getScaleNum();
        if (scaleNum != null) {
            stmt.bindString(12, scaleNum);
        }
 
        String merchantName = entity.getMerchantName();
        if (merchantName != null) {
            stmt.bindString(13, merchantName);
        }
 
        String tradeTime = entity.getTradeTime();
        if (tradeTime != null) {
            stmt.bindString(14, tradeTime);
        }
 
        String tradeUnit = entity.getTradeUnit();
        if (tradeUnit != null) {
            stmt.bindString(15, tradeUnit);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(16, payType);
        }
        stmt.bindLong(17, entity.getIDataType());
        stmt.bindLong(18, entity.getIsUpdate());
        stmt.bindLong(19, entity.getTradeDataSources());
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(20, merchantId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScaleTrade entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String marketId = entity.getMarketId();
        if (marketId != null) {
            stmt.bindString(2, marketId);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(3, goodsName);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, user);
        }
        stmt.bindDouble(5, entity.getUnitPrice());
        stmt.bindDouble(6, entity.getWeightPcs());
        stmt.bindDouble(7, entity.getTotPrice());
        stmt.bindLong(8, entity.getPlu());
 
        String tradeNo = entity.getTradeNo();
        if (tradeNo != null) {
            stmt.bindString(9, tradeNo);
        }
 
        String scaleStallNum = entity.getScaleStallNum();
        if (scaleStallNum != null) {
            stmt.bindString(10, scaleStallNum);
        }
 
        String stallNum = entity.getStallNum();
        if (stallNum != null) {
            stmt.bindString(11, stallNum);
        }
 
        String scaleNum = entity.getScaleNum();
        if (scaleNum != null) {
            stmt.bindString(12, scaleNum);
        }
 
        String merchantName = entity.getMerchantName();
        if (merchantName != null) {
            stmt.bindString(13, merchantName);
        }
 
        String tradeTime = entity.getTradeTime();
        if (tradeTime != null) {
            stmt.bindString(14, tradeTime);
        }
 
        String tradeUnit = entity.getTradeUnit();
        if (tradeUnit != null) {
            stmt.bindString(15, tradeUnit);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(16, payType);
        }
        stmt.bindLong(17, entity.getIDataType());
        stmt.bindLong(18, entity.getIsUpdate());
        stmt.bindLong(19, entity.getTradeDataSources());
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(20, merchantId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScaleTrade readEntity(Cursor cursor, int offset) {
        ScaleTrade entity = new ScaleTrade( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // marketId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user
            cursor.getDouble(offset + 4), // unitPrice
            cursor.getDouble(offset + 5), // weightPcs
            cursor.getDouble(offset + 6), // totPrice
            cursor.getInt(offset + 7), // plu
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tradeNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // scaleStallNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // stallNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // scaleNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // merchantName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // tradeTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // tradeUnit
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // payType
            cursor.getInt(offset + 16), // iDataType
            cursor.getInt(offset + 17), // isUpdate
            cursor.getInt(offset + 18), // tradeDataSources
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // merchantId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScaleTrade entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMarketId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitPrice(cursor.getDouble(offset + 4));
        entity.setWeightPcs(cursor.getDouble(offset + 5));
        entity.setTotPrice(cursor.getDouble(offset + 6));
        entity.setPlu(cursor.getInt(offset + 7));
        entity.setTradeNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setScaleStallNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStallNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScaleNum(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMerchantName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTradeTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTradeUnit(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPayType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIDataType(cursor.getInt(offset + 16));
        entity.setIsUpdate(cursor.getInt(offset + 17));
        entity.setTradeDataSources(cursor.getInt(offset + 18));
        entity.setMerchantId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScaleTrade entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScaleTrade entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScaleTrade entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
